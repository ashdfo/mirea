Примеры изначальных программ с массивом и стеком на PYTHON:
numbers = [1, 2, 3, 4, 5]
print("Массив:", numbers)
print("Сумма элементов:", sum(numbers))

stack = []
stack.append(1); stack.append(2); stack.append(3)
print("Стек:", stack)
print("Верхний элемент:", stack.pop())

Как мы видим, синтаксис данного языка программирования довольно прост: нам не нужно заранее объявлять типы, для разделения мы не используем точки с запятой, а все необходимые функции доступны сразу, так как они являются встроенными. Теперь рассмотрим эту же программу на языке C++

Пример тех же программ на C++ (сначала идет пример с массивом, а затем со стеком):
#include <iostream>
using namespace std;
int main() {
    int numbers[] = {1, 2, 3, 4, 5};
    cout << "Массив: ";
    for(int i = 0; i < 5; i++) cout << numbers[i] << " ";
}

#include <iostream>
#include <stack>
using namespace std;

int main() {
    stack<int> s;
    s.push(1); s.push(2); s.push(3);
    cout << "Верхний элемент: " << s.top();
}

В данном случае мы импортируем сторонние библиотеки, чтобы наша программа корректно работала (например, подключаем #include). Помимо этого, для разделения строк необходима точка с запятой, а также обязательное использование функции main. В случае работы со стеком используем STL stack и специальный заголовочный файл. Сам по себе C++ имеет указанный тип (тип возвращаемого значения) и требует более развернутого описания и конкретизации типов и структуры программы в целом. Перейдём к языку Java

Пример программ на JAVA (сначала идет пример с массивом, а затем со стеком):
public class Main {
    public static void main(String[] args) {
        int[] numbers = {1, 2, 3, 4, 5};
        System.out.println("Длина массива: " + numbers.length);
    }
}

import java.util.Stack;

public class Main {
    public static void main(String[] args) {
        Stack<Integer> stack = new Stack<>();
        stack.push(1); stack.push(2); stack.push(3);
        System.out.println("Верхний элемент: " + stack.pop());
    }
}

Как и в случае с C++, здесь мы используем точку с запятой для разделения строк. Самым важным здесь является то, что указание класса в данном языке программирования крайне важно, так как вся программа по сути находится внутри него (+, мы используем специальную System.out.println). В Java также используется статическая типизация (в отличие от того же Python). Помимо этого, как и в в C++ мы используем функцию main. Если мы рассматриваем стековый пример, здесь важным элементом является использование Stack из java.util, который требует импорта данных и создания нового объекта с помощью new  

